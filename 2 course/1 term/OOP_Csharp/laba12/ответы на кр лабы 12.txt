1. Какие классы содержаться с System.IO?
- Классы для работы с файлами: File, FileInfo. Класс для работы с путями: Path. 
  Помимо этого System.IO содержит основные классы для работы с потоками: Stream, FileStream, 
  StreamReader, StreamWriter, StringReader, StringWriter, TextReader, TextWriter, BinaryReader, 
  BinaryWriter и MemoryStream.

2. Для чего используются классы Directory и DirectoryInfo? В чем 
отличие?
- DirectoryInfo - это класс, представляющий каталог. Он предоставляет методы для создания, 
  перемещения и перечисления каталогов и подкаталогов. Этот класс не позволяет иметь подклассы.
- Разница между 2 классами Directory и DirectoryInfo заключается в том, что Directory является 
  утилитарным классом, все его методы являются статическими, а DirectoryInfo представляет 
  конкретный каталог.
- Утилитарный класс — это класс-помощник, содержащий статические переменные и статические 
  методы, которые выполняют определенный перечень задач, объединённых одним смыслом.

3. Для чего используются классы File и FileInfo? Какие методы они 
содержат.
- С их помощью мы можем создавать, удалять, перемещать файлы, получать их свойства и многое 
  другое.
- методы FileInfo:
  CopyTo(path): копирует файл в новое место по указанному пути path
  Create(): создает файл
  Delete(): удаляет файл
  MoveTo(destFileName): перемещает файл в новое место
- Класс File реализует похожую функциональность с помощью статических методов:
  Copy(): копирует файл в новое место
  Create(): создает файл
  Delete(): удаляет файл
  Move: перемещает файл в новое место
- FileInfo отличается File тем, что второй так как является статическим, будет принимать больше
  параметров

4. Для чего используются классы StreamReader и StreamWriter?
- Для работы с текстовыми файлами применяются два класса StreamReader и StreamWriter. 
  По названию классов видно, что первый используется для работы с файлами в режиме чтения, 
  второй для работы в режиме записи. Они интуитивно понятны, так как все их методы явно 
  отражают действия

5. Для чего используются классы BinaryWriter и BinaryReader?
- Для чтения и записи двоичных значений типов данных, которые встроены в C#, служат классы 
  потоков "BinaryReader" и "BinaryWriter". Когда вы используете данные потоки, помните, что 
  данные считываются и записываются во внутреннем двоичном формате, а не в удобной для чтения 
  текстовой форме.

6. Как можно сжимать и восстанавливать файлы?
- архиваться через  ZipFile.CreateFromDirectory(sourceFolder, zipFile);
- разархивирование через ZipFile.ExtractToDirectory(zipFile, targetFolder);

7. Расскажите алгоритм сжатия GZip.
// Создайте объект класса GzipArchive.
using (GzipArchive archive = new GzipArchive())
{
    // установить источник
    archive.SetSource("data.bin");
    
    // создать архив
    archive.Save("archive.gz");
}

8. Для чего служит класс Path?
- Выполняет операции для экземпляров класса String, содержащих сведения о пути к файлу или 
  каталогу. Эти операции выполняются межплатформенным способом

9. Что такое тестовый и бинарный файл. Как можно выполнить чтение 
и запись в эти файлы.
- Бинарный файл - тот, что состоит из 0 и 1, текстовые - все остальные
- Для работы с бинарными файлами предназначена пара классов BinaryWriter и BinaryReader. 
  Эти классы позволяют читать и записывать данные в двоичном формате.

10.Что такое произвольный доступ к файлу? Приведите пример.
- в С# возможен произвольный доступ к содержимому файлов. Для этого используется метод Seek(), 
  определенный в классе FileStream. Этот метод позволяет задавать индикатор позиции текущего 
  элемента данных в файле (или файловый указатель).
- Синтаксис метода Seek():
  long Seek (long newPos, SeekOrigin origin)
- Пример
// считывание букв

f.Seek(0, SeekOrigin.Begin);
c = (char)f.ReadByte();
Console.WriteLine("Первое значение" + c);
f.Seek(1, SeekOrigin.Begin);
c = (char)f.ReadByte();
Console.WriteLine("Второе значение" + c);
f.Seek(4, SeekOrigin.Begin);
c = (char)f.ReadByte();
// и так далее

11.Как применяется конструкция using (не директива) при работе с 
файловыми потоками? Для чего ее используют.
- Она помогает создавать новые потоки и при выходе с тела конструкции, память автоматичсески
  освобождается сама
using (streamreader sw = new streamreader(path))
{ ... }
