1) Что такое делегаты? И зачем они нужны?
- Делегат - тип, который содержит ссылку на один или больше методов с одинаковой сигнатурой (
сигнатура - тип возвращемого и входного значений). 
- Синтаксис задания делегата:
public delegate void Relocate(string message);
- Они нужны для хранения ссылки на метод и последующего доступа к нему

2) Как можно передать делегату адрес метода (исп-м делегат выше)?
- Либо через переменную делегата:
Relocate rel; rel = Show; rel();
- Либо через событие делегата:
class myClass { public event Relocate Relocating; } 
myClass class1 = new Class(); class1.Relocating += Show;

3) Поясните назначение метода Invoke?
- Суть метода Invoke довольно проста - он принимает делегат и выполняет его в том потоке, 
в котором был создан элемент управления, у которого вызывается Invoke. 
- Invoke вызывает метод в том потоке, где он был создан.

4) Что такое групповая адресация делегата?
- Групповая адресация - это возможность создать цепочку вызовов для методов, которые вызываются 
автоматически и последовательно при обращении к делегату. Для этого надо создать экземпляр 
делегата, а потом добавить методы с помощью оператора + или += Для удаления метода из цепочки 
служит оператор - или -=.

5) Как создать событие?
- public event Relocate Relocating;
- Событие может быть использовано для предоставления уведомлений. Вы можете подписаться 
на событие, если вам нужны эти уведомления. Вы также можете создавать свои собственные события, 
которые будут уведомлять вас о том, что случилось что-то, что вас интересует. .NET Framework 
предлагает встроенные типы, которые можно использовать для создания событий.

6) Как события связаны с делегатами? Опишите и поясните схему взаимодействия?
- События построены на основе делегатов: с помощью делегатов 
вызываются методы-обработчики событий. Поэтому создание 
события в классе состоит из следующих частей:
1. описание делегата, задающего сигнатуру 
обработчиков событий;
2. описание события;
3. описание метода (методов), инициирующих 
событие

7) Что такое лямбда-выражения?
- Лямбда-функция не имеет конкретного имени в отличии от метода. Из-за этого лямбды 
называются анонимными функциями. Вам также не нужно явно указывать тип возвращаемого 
значения. Компилятор предполагает его автоматически из вашей лямбды.

8) Ковариантность и контравариантность в C#
- Когда вы назначаете делегату метод, сигнатура метода не обязательно должна точно 
соответствовать делегату. Это называется ковариацией и контравариантностью. Ковариация 
позволяет методу иметь более производный тип возвращаемого значения, нежели тот, который 
определен в делегате. Контравариантность разрешает метод с типами параметров, которые 
являются менее производными, чем типы в делегате.

9) Какие есть встроенные типы делегатов?
- Action, Func, Predicate

10) В чем отличия Func от Active?
- Основное различие между делегатами Func и Action заключается в том, что первый используется 
для делегатов, возвращающих значение, в то время как второй может использоваться для делегатов, 
не имеющих возвращаемого значения.
- Func и Action обобщенные делегаты были введены в .NET Framework начиная с NET 3.5. Они 
обеспечивают гибкость делегатов с общими параметрами. Делегат Func предназначен для 
инкапсуляции метода, который принимает в качестве параметров от нуля для четырех аргументов 
и возвращает значение. Что же касается делегата Action, то единственное отличие его от 
Func – это то, что Action возвращает процедуру.
