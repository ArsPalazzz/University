1) Что такое делегаты? И зачем они нужны?
- Делегат - тип, который содержит ссылку на один или больше методов с одинаковой сигнатурой (
сигнатура - тип возвращемого и входного значений). 
- Синтаксис задания делегата:
public delegate void Relocate(string message);
- Они нужны для хранения ссылки на метод и последующего доступа к нему

2) Как можно передать делегату адрес метода (исп-м делегат выше)?
- Либо через переменную делегата:
Relocate rel; rel = Show; rel();
- Либо через событие делегата:
class myClass { public event Relocate Relocating; } 
myClass class1 = new Class(); class1.Relocating += Show;

3) Поясните назначение метода Invoke?
- Если не используется метод Invoke и делегату не передается ссылка на метод, то вызовется 
исключение. Если испо-ся метод Invoke, то делегат просто не вызовется. Пример:
Message? msg = null; // передадим в объект делегата ссылку на пустой метод
msg.Invoke(); // не вызовется исключение, так как исполь-ся метод Invoke()

4) Как создать событие?
- public event Relocate Relocating;
- Событие может быть использовано для предоставления уведомлений. Вы можете подписаться 
на событие, если вам нужны эти уведомления. Вы также можете создавать свои собственные события, 
которые будут уведомлять вас о том, что случилось что-то, что вас интересует. .NET Framework 
предлагает встроенные типы, которые можно использовать для создания событий.

5) В чем отличия Func от Active?
- Основное различие между делегатами Func и Action заключается в том, что первый используется 
для делегатов, возвращающих значение, в то время как второй может использоваться для делегатов, 
не имеющих возвращаемого значения.
- Func и Action обобщенные делегаты были введены в .NET Framework начиная с NET 3.5. Они 
обеспечивают гибкость делегатов с общими параметрами. Делегат Func предназначен для 
инкапсуляции метода, который принимает в качестве параметров от нуля для четырех аргументов 
и возвращает значение. Что же касается делегата Action, то единственное отличие его от 
Func – это то, что Action возвращает процедуру.

6) Что такое делигат Predicate?
- Делегат Predicate<T> принимает один параметр и возвращает значение типа bool:

delegate bool Predicate<in T>(T obj);
Как правило, используется для сравнения, сопоставления некоторого объекта T определенному 
условию. В качестве выходного результата возвращается значение true, если условие соблюдено, 
и false, если не соблюдено