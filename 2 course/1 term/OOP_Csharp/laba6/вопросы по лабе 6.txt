1) что такое исключения?
- Исключение AC # - это ответ на исключительное обстоятельство, которое возникает во время работы программы, например попытка деления 
  на ноль.
- Исключения обеспечивают способ передачи контроля из одной части программы в другую. 
- Обработка исключений C # построена на четырех ключевых словах: try , catch , finally и throw .

2) как его сгенироровать? 
- ИСКЛ генерируется автоматически, но их также можно генерировать вручную с помощью оператора throw
- 1. Сначала, мы создаем класс с нашим пользовательским исключением (пр., SymbolsException), который наследуется от встроенного Exeption
  2. Потом, в нашем нужном классе, вызываем наше исключение при определенном условии. Пример:
    if (weight < 0)
     throw new SymbolsException("Длина имени меньше 2 символов");
  3. После чего оно автоматически вызовется в нашем Program при нарушнии условия weight < 0 или при
     catch (SymbolsException)

3) Что мы используем в нашем классе исключения SymbolsException?
- как правило, это конструктор, который в общем случае наследует какой-то метод или параметр у базового типа Exception
  class SymbolsException : Exception
  {
    string SymbolsException(string msg) : base(msg) {}
  }

4) если несколько catch относятся к одному try, то вып-ся сначала более специфичные 
   (пр., OverflowDivideByZero : Exception, потом Exeption)

5) что такое класс Exeption
- Класс Exception — базовый класс всех типов исключений в C#. 

6) спрашивает по коду

7) блок try catch finally
try - пробуем процедуру
catch - ловим ошибку и обрабатываем исключение. catch (Exception ex) - параметр это тип обрабатываемого исключения
finally - финальный блок к которому приводят try или catch.
Блок finally можно использовать для высвобождения ресурсов

8) какие catch могут быть?
- хз, вроде обычные (пр., catch (DivideByZeroException) ) и универсальные (пр., catch (Exception ex))

9) они могут идти подряд? - да

10) catch when, что это?
- фильтры исключений. Сначала выполняется when, потом обрабатывается исключение

11) debug
- исп-ся для взаимо-я с отладкой

12) debugger
исп-ся для взаимо-я с отладкой

13) Debug.Assert(3 > 1) принимает параметр, если он возвращает false то тогда он остановит работу программы и будет функционировать,
    как точка останова. Если true то программа продолжит работу.

владик и КрутойИещекруче