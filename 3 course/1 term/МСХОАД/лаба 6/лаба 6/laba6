USE master;

SELECT
    name AS LogicalName,
    physical_name AS PhysicalPath
FROM sys.master_files
WHERE database_id = DB_ID('5sem');





create table Licensees (
	licensee_id int primary key,
	name nvarchar(10),
	surname nvarchar(10),
	organization nvarchar(20),
	contact nvarchar(30),
	add_details nvarchar(20)
);


create table Licenses (
	license_id int primary key,
	license_name nvarchar(20),
	license_type nvarchar(20),
	date_of_issue date,
	expiration_date date,
	description nvarchar(30),
	status nvarchar(20),
	licensees_id int,
	id_of_key int,
	total_license_cost decimal(10,2),
	licensee_contact nvarchar(30),
	foreign key (licensees_id) references Licensees (licensee_id)
);


create table License_keys (
	id_of_key int primary key,
	id_of_license int,
	key_of_name nvarchar(20),
	status nvarchar(20),
             foreign key (id_of_license) references Licenses (license_id)
);




create table License_Rules (
	rule_id int primary key,
	license_id int,
	text_rules nvarchar(20),
	data_create date,
	data_change date,
             foreign key (license_id) references Licenses(license_id)
);

create table License_History (
	record_id int primary key,
	license_id int,
	action nvarchar(10),
	date_of_action date,
	username nvarchar(10),
             foreign key (license_id) references Licenses(license_id)
);




-- Добавление данных в таблицу Licensees
INSERT INTO Licensees (licensee_id, name, surname, organization, contact, add_details)
VALUES (1, 'John', 'Doe', 'Company A', 'john.doe@example.com', 'Additional Info');

-- Добавление данных в таблицу Licenses
INSERT INTO Licenses (license_id, license_name, license_type, date_of_issue, expiration_date, description, status, licensees_id, id_of_key, total_license_cost, licensee_contact)
VALUES (1, 'License 1', 'Type A', '2023-01-01', '2023-12-31', 'Description 1', 'Active', 1, 101, 500.00, 'john.doe@example.com');

-- Добавление данных в таблицу License_keys
INSERT INTO License_keys (id_of_key, id_of_license, key_of_name, status)
VALUES (101, 1, 'Key 101', 'Active');

-- Добавление данных в таблицу License_Rules
INSERT INTO License_Rules (rule_id, license_id, text_rules, data_create, data_change)
VALUES (1, 1, 'Rule 1', '2023-01-01', '2023-01-05');




-- Начало транзакции
BEGIN;

INSERT INTO License_History (record_id, license_id, action, date_of_action, username)
VALUES (1, 1, 'Update', '2023-01-05', 'Admin');


COMMIT;




-- Обновление данных в таблице Licensees
UPDATE Licensees SET organization = 'New Organization' WHERE licensee_id = 1;




-- Начало транзакции
BEGIN TRANSACTION;



-- Обновление данных в таблице Licenses
UPDATE Licenses SET description = 'Updated Description' WHERE license_id = 1;

-- Завершение транзакции (фиксация изменений)
COMMIT;








-- Удаление данных из таблицы License_keys
DELETE FROM License_keys WHERE id_of_key = 101;

-- Удаление данных из таблицы License_Rules
DELETE FROM License_Rules WHERE rule_id = 1;

-- Удаление данных из таблицы License_History
DELETE FROM License_History WHERE record_id = 1;

-- Удаление данных из таблицы Licenses
DELETE FROM Licenses WHERE license_id = 1;






-- Начало транзакции
BEGIN TRANSACTION;



-- Удаление данных из таблицы Licensees
DELETE FROM Licensees WHERE licensee_id = 1;

-- Завершение транзакции (фиксация изменений)
COMMIT;








-- Представление для отображения информации о лицензиях и их владельцах
CREATE VIEW IF NOT EXISTS LicenseInfo AS
SELECT
    L.license_id,
    L.license_name,
    L.license_type,
    L.date_of_issue,
    L.expiration_date,
    L.description,
    L.status,
    Le.name AS licensee_name,
    Le.surname AS licensee_surname,
    Le.organization AS licensee_organization
FROM Licenses L
INNER JOIN Licensees Le ON L.licensees_id = Le.licensee_id;

-- Представление для отображения истории действий с лицензиями
CREATE VIEW IF NOT EXISTS LicenseHistory AS
SELECT
    LH.record_id,
    LH.action,
    LH.date_of_action,
    LH.username,
    L.license_name
FROM License_History LH
INNER JOIN Licenses L ON LH.license_id = L.license_id;

-- Индекс на поле license_name в таблице Licenses
CREATE INDEX IF NOT EXISTS IX_LicenseName ON Licenses (license_name);

-- Индекс на поле licensees_id в таблице Licenses
CREATE INDEX IF NOT EXISTS IX_LicenseesID ON Licenses (licensees_id);




-- Триггер для отслеживания изменений в таблице Licenses и записи их в истории
CREATE TRIGGER IF NOT EXISTS trg_Licenses_Update
AFTER UPDATE ON Licenses
BEGIN
    INSERT INTO License_History (license_id, action, date_of_action, username)
    SELECT NEW.license_id, 'Update', CURRENT_DATE, 'Admin';
END;

-- Триггер для отслеживания удалений из таблицы Licenses и записи их в истории
CREATE TRIGGER IF NOT EXISTS trg_Licenses_Delete
AFTER DELETE ON Licenses
BEGIN
    INSERT INTO License_History (license_id, action, date_of_action, username)
    SELECT OLD.license_id, 'Delete', CURRENT_DATE, 'Admin';
END;










































-- Создание таблицы Users
CREATE TABLE Users (
    UserID INTEGER PRIMARY KEY,
    FirstName TEXT,
    LastName TEXT,
    Username TEXT,
    Email TEXT,
    Role TEXT,
    UserFullName AS (FirstName || ' ' || LastName) -- Денормализованный атрибут
);

-- Создание таблицы Requests
CREATE TABLE Requests (
    RequestID INTEGER PRIMARY KEY,
    Title TEXT,
    Description TEXT,
    Status TEXT,
    Priority TEXT,
    CreatedAt TEXT,
    UpdatedAt TEXT,
    UserID INTEGER,
    UserFullName TEXT, -- Денормализованный атрибут
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Создание таблицы Incidents
CREATE TABLE Incidents (
    IncidentID INTEGER PRIMARY KEY,
    Title TEXT,
    Description TEXT,
    Status TEXT,
    Priority TEXT,
    CreatedAt TEXT,
    ClosedAt TEXT,
    UserID INTEGER,
    UserFullName TEXT, -- Денормализованный атрибут
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Создание таблицы Comments
CREATE TABLE Comments (
    CommentID INTEGER PRIMARY KEY,
    Text TEXT,
    CreatedAt TEXT,
    UserID INTEGER,
    UserFullName TEXT, -- Денормализованный атрибут
    RequestID INTEGER,
    IncidentID INTEGER,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (RequestID) REFERENCES Requests(RequestID),
    FOREIGN KEY (IncidentID) REFERENCES Incidents(IncidentID)
);

-- Создание таблицы KnowledgeBase
CREATE TABLE KnowledgeBase (
    ArticleID INTEGER PRIMARY KEY,
    Title TEXT,
    Content TEXT,
    Category TEXT,
    CreatedAt TEXT
);

-- Создание таблицы Reports
CREATE TABLE Reports (
    ReportID INTEGER PRIMARY KEY,
    ReportType TEXT,
    CreatedAt TEXT,
    ReportData TEXT,
    UserID INTEGER,
    UserFullName TEXT, -- Денормализованный атрибут
    RequestType TEXT, -- Денормализованный атрибут
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Добавление столбца KnowledgeBaseID в таблицу Requests
ALTER TABLE Requests
ADD COLUMN KnowledgeBaseID INTEGER;

-- Создание связи между столбцами KnowledgeBaseID в таблицах Requests и KnowledgeBase
UPDATE Requests
SET KnowledgeBaseID = NULL;


-- Добавление данных в таблицу Users
INSERT INTO Users (UserID, FirstName, LastName, Username, Email, Role)
VALUES (1, 'John', 'Doe', 'johndoe', 'john@example.com', 'Admin'),
       (2, 'Alice', 'Smith', 'alicesmith', 'alice@example.com', 'User'),
       (3, 'Bob', 'Johnson', 'bobjohnson', 'bob@example.com', 'User');

-- Добавление данных в таблицу Requests
INSERT INTO Requests (RequestID, Title, Description, Status, Priority, CreatedAt, UpdatedAt, UserID, UserFullName, KnowledgeBaseID)
VALUES (1, 'Request Title 1', 'Request description 1', 'Open', 'High', '2023-10-30', '2023-11-01', 1, 'John Doe', NULL),
       (2, 'Request Title 2', 'Request description 2', 'Closed', 'Medium', '2023-10-31', '2023-11-02', 2, 'Alice Smith', NULL),
       (3, 'Request Title 3', 'Request description 3', 'Open', 'Low', '2023-11-01', '2023-11-03', 3, 'Bob Johnson', NULL);

-- Добавление данных в таблицу Incidents
INSERT INTO Incidents (IncidentID, Title, Description, Status, Priority, CreatedAt, ClosedAt, UserID, UserFullName)
VALUES (1, 'Incident Title 1', 'Incident description 1', 'Open', 'High', '2023-10-30', '2023-11-01', 1, 'John Doe'),
       (2, 'Incident Title 2', 'Incident description 2', 'Closed', 'Medium', '2023-10-31', '2023-11-02', 2, 'Alice Smith'),
       (3, 'Incident Title 3', 'Incident description 3', 'Open', 'Low', '2023-11-01', '2023-11-03', 3, 'Bob Johnson');

-- Добавление данных в таблицу Comments
INSERT INTO Comments (CommentID, Text, CreatedAt, UserID, UserFullName, RequestID, IncidentID)
VALUES (1, 'Comment text 1', '2023-10-30', 1, 'John Doe', 1, NULL),
       (2, 'Comment text 2', '2023-10-31', 2, 'Alice Smith', NULL, 1),
       (3, 'Comment text 3', '2023-11-01', 3, 'Bob Johnson', NULL, 2);

-- Добавление данных в таблицу KnowledgeBase
INSERT INTO KnowledgeBase (ArticleID, Title, Content, Category, CreatedAt)
VALUES (1, 'Article Title 1', 'Article content 1', 'Category 1', '2023-10-30'),
       (2, 'Article Title 2', 'Article content 2', 'Category 2', '2023-10-31'),
       (3, 'Article Title 3', 'Article content 3', 'Category 3', '2023-11-01');

-- Добавление данных в таблицу Reports
INSERT INTO Reports (ReportID, ReportType, CreatedAt, ReportData, UserID, UserFullName, RequestType)
VALUES (1, 'Report Type 1', '2023-10-30', 'Report data 1', 1, 'John Doe', 'Type A'),
       (2, 'Report Type 2', '2023-10-31', 'Report data 2', 2, 'Alice Smith', 'Type B'),
       (3, 'Report Type 3', '2023-11-01', 'Report data 3', 3, 'Bob Johnson', 'Type C');


-- Обновление данных в подчиненной таблице
BEGIN TRANSACTION;

UPDATE Requests SET Status = 'In Progress' WHERE RequestID = 1;

COMMIT;

-- Добавление данных в подчиненную таблицу
BEGIN TRANSACTION;

INSERT INTO Comments (CommentID, Text, CreatedAt, UserID, UserFullName, RequestID)
VALUES (4, 'Additional comment', '2023-11-04', 1, 'John Doe', 1);

COMMIT;

-- Удаление данных из подчиненной таблицы
BEGIN TRANSACTION;

DELETE FROM Comments WHERE IncidentID = 2;

COMMIT;



-- Предаставление на 2 таблицы
CREATE VIEW RequestsAndUsers AS
SELECT
    r.RequestID,
    r.Title,
    r.Description,
    r.Status,
    r.Priority,
    r.CreatedAt,
    r.UpdatedAt,
    r.UserID AS RequestUserID,
    r.UserFullName AS RequestUserFullName,
    u.FirstName AS UserFirstName,
    u.LastName AS UserLastName,
    u.Username AS UserUsername,
    u.Email AS UserEmail,
    u.Role AS UserRole
FROM Requests r
JOIN Users u ON r.UserID = u.UserID;

SELECT * FROM RequestsAndUsers;


-- Пример создания индекса для внешнего ключа UserID в таблице Requests
CREATE INDEX idx_Requests_UserID ON Requests(UserID);

-- Пример создания индекса для внешнего ключа UserID в таблице Incidents
CREATE INDEX idx_Incidents_UserID ON Incidents(UserID);

-- Пример создания индекса для внешнего ключа RequestID в таблице Comments
CREATE INDEX idx_Comments_RequestID ON Comments(RequestID);

-- Пример создания индекса для внешнего ключа IncidentID в таблице Comments
CREATE INDEX idx_Comments_IncidentID ON Comments(IncidentID);

-- Пример создания индекса для внешнего ключа UserID в таблице Comments
CREATE INDEX idx_Comments_UserID ON Comments(UserID);

-- Пример создания индекса для внешнего ключа UserID в таблице Reports
CREATE INDEX idx_Reports_UserID ON Reports(UserID);


-- Создание триггера
CREATE TRIGGER trg_Request_Insert
AFTER INSERT ON Requests
BEGIN
    SELECT 'New row inserted with RequestID: ', new.RequestID, ' and Title: ', new.Title 
    FROM Requests AS new WHERE new.RequestID = NEW.RequestID;
END;

INSERT INTO Requests (RequestID, Title, Description, Status, Priority, CreatedAt, UpdatedAt, UserID, UserFullName)
VALUES (14, 'New Request', 'Description', 'Open', 'High', '2023-11-01', '2023-11-01', 1, 'John Doe');



-- Удаление таблицы Reports
DROP TABLE IF EXISTS Reports;

-- Удаление таблицы KnowledgeBase
DROP TABLE IF EXISTS KnowledgeBase;

-- Удаление таблицы Comments
DROP TABLE IF EXISTS Comments;

-- Удаление таблицы Incidents
DROP TABLE IF EXISTS Incidents;

-- Удаление таблицы Requests
DROP TABLE IF EXISTS Requests;

-- Удаление таблицы Users
DROP TABLE IF EXISTS Users;


DROP VIEW RequestsAndUsers;

DROP TRIGGER  trg_Request_Insert;

DROP INDEX idx_Requests_UserID;

DROP INDEX idx_Incidents_UserID;

DROP INDEX idx_Comments_RequestID;

DROP INDEX idx_Comments_IncidentID;

DROP INDEX idx_Comments_UserID;

DROP INDEX idx_Reports_UserID;